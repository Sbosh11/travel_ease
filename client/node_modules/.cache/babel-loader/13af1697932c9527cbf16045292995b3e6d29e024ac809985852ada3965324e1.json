{"ast":null,"code":"import axios from \"axios\";\nconst API_KEY = \"AIzaSyBCL1EwLHgn8s3qXIk-rTVtr3DW3P8ZHR4\";\nconst URL = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json\";\nexport const getPlacesDetails = async (sw, ne, apiKey) => {\n  const centerLat = (sw.lat + ne.lat) / 2;\n  const centerLng = (sw.lng + ne.lng) / 2;\n  const radius = calculateRadius(sw, ne); // Function to calculate radius based on bounds\n\n  const options = {\n    method: \"GET\",\n    url: URL,\n    params: {\n      location: `${centerLat},${centerLng}`,\n      radius: radius,\n      type: \"restaurant\",\n      // You can change this to other place types if needed\n      key: apiKey\n    }\n  };\n  try {\n    const response = await axios.request(options);\n    console.log(\"Full API Response:\", response);\n    const {\n      results\n    } = response.data;\n    console.log(\"Data from API:\", results);\n    return results;\n  } catch (error) {\n    console.error(\"Error fetching data from API:\", error);\n    return null;\n  }\n};\n\n// Helper function to calculate the radius based on bounds\nconst calculateRadius = (sw, ne) => {\n  const R = 6371; // Radius of the Earth in km\n  const dLat = degreesToRadians(ne.lat - sw.lat);\n  const dLng = degreesToRadians(ne.lng - sw.lng);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(degreesToRadians(sw.lat)) * Math.cos(degreesToRadians(ne.lat)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = R * c;\n  return distance * 1000; // Convert km to meters\n};\nconst degreesToRadians = degrees => {\n  return degrees * (Math.PI / 180);\n};","map":{"version":3,"names":["axios","API_KEY","URL","getPlacesDetails","sw","ne","apiKey","centerLat","lat","centerLng","lng","radius","calculateRadius","options","method","url","params","location","type","key","response","request","console","log","results","data","error","R","dLat","degreesToRadians","dLng","a","Math","sin","cos","c","atan2","sqrt","distance","degrees","PI"],"sources":["C:/Users/Sibongile/Documents/sibongile/2024/projects/portfolio/APIs/travel_ease/src/API/index.js"],"sourcesContent":["import axios from \"axios\";\r\nconst API_KEY = \"AIzaSyBCL1EwLHgn8s3qXIk-rTVtr3DW3P8ZHR4\";\r\nconst URL = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json\";\r\n\r\nexport const getPlacesDetails = async (sw, ne, apiKey) => {\r\n  const centerLat = (sw.lat + ne.lat) / 2;\r\n  const centerLng = (sw.lng + ne.lng) / 2;\r\n  const radius = calculateRadius(sw, ne); // Function to calculate radius based on bounds\r\n\r\n  const options = {\r\n    method: \"GET\",\r\n    url: URL,\r\n    params: {\r\n      location: `${centerLat},${centerLng}`,\r\n      radius: radius,\r\n      type: \"restaurant\", // You can change this to other place types if needed\r\n      key: apiKey,\r\n    },\r\n  };\r\n\r\n  try {\r\n    const response = await axios.request(options);\r\n    console.log(\"Full API Response:\", response);\r\n    const { results } = response.data;\r\n    console.log(\"Data from API:\", results);\r\n    return results;\r\n  } catch (error) {\r\n    console.error(\"Error fetching data from API:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Helper function to calculate the radius based on bounds\r\nconst calculateRadius = (sw, ne) => {\r\n  const R = 6371; // Radius of the Earth in km\r\n  const dLat = degreesToRadians(ne.lat - sw.lat);\r\n  const dLng = degreesToRadians(ne.lng - sw.lng);\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos(degreesToRadians(sw.lat)) *\r\n      Math.cos(degreesToRadians(ne.lat)) *\r\n      Math.sin(dLng / 2) *\r\n      Math.sin(dLng / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const distance = R * c;\r\n  return distance * 1000; // Convert km to meters\r\n};\r\n\r\nconst degreesToRadians = (degrees) => {\r\n  return degrees * (Math.PI / 180);\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,OAAO,GAAG,yCAAyC;AACzD,MAAMC,GAAG,GAAG,8DAA8D;AAE1E,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,EAAE,EAAEC,EAAE,EAAEC,MAAM,KAAK;EACxD,MAAMC,SAAS,GAAG,CAACH,EAAE,CAACI,GAAG,GAAGH,EAAE,CAACG,GAAG,IAAI,CAAC;EACvC,MAAMC,SAAS,GAAG,CAACL,EAAE,CAACM,GAAG,GAAGL,EAAE,CAACK,GAAG,IAAI,CAAC;EACvC,MAAMC,MAAM,GAAGC,eAAe,CAACR,EAAE,EAAEC,EAAE,CAAC,CAAC,CAAC;;EAExC,MAAMQ,OAAO,GAAG;IACdC,MAAM,EAAE,KAAK;IACbC,GAAG,EAAEb,GAAG;IACRc,MAAM,EAAE;MACNC,QAAQ,EAAG,GAAEV,SAAU,IAAGE,SAAU,EAAC;MACrCE,MAAM,EAAEA,MAAM;MACdO,IAAI,EAAE,YAAY;MAAE;MACpBC,GAAG,EAAEb;IACP;EACF,CAAC;EAED,IAAI;IACF,MAAMc,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,OAAO,CAACR,OAAO,CAAC;IAC7CS,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEH,QAAQ,CAAC;IAC3C,MAAM;MAAEI;IAAQ,CAAC,GAAGJ,QAAQ,CAACK,IAAI;IACjCH,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,OAAO,CAAC;IACtC,OAAOA,OAAO;EAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,MAAMd,eAAe,GAAGA,CAACR,EAAE,EAAEC,EAAE,KAAK;EAClC,MAAMsB,CAAC,GAAG,IAAI,CAAC,CAAC;EAChB,MAAMC,IAAI,GAAGC,gBAAgB,CAACxB,EAAE,CAACG,GAAG,GAAGJ,EAAE,CAACI,GAAG,CAAC;EAC9C,MAAMsB,IAAI,GAAGD,gBAAgB,CAACxB,EAAE,CAACK,GAAG,GAAGN,EAAE,CAACM,GAAG,CAAC;EAC9C,MAAMqB,CAAC,GACLC,IAAI,CAACC,GAAG,CAACL,IAAI,GAAG,CAAC,CAAC,GAAGI,IAAI,CAACC,GAAG,CAACL,IAAI,GAAG,CAAC,CAAC,GACvCI,IAAI,CAACE,GAAG,CAACL,gBAAgB,CAACzB,EAAE,CAACI,GAAG,CAAC,CAAC,GAChCwB,IAAI,CAACE,GAAG,CAACL,gBAAgB,CAACxB,EAAE,CAACG,GAAG,CAAC,CAAC,GAClCwB,IAAI,CAACC,GAAG,CAACH,IAAI,GAAG,CAAC,CAAC,GAClBE,IAAI,CAACC,GAAG,CAACH,IAAI,GAAG,CAAC,CAAC;EACtB,MAAMK,CAAC,GAAG,CAAC,GAAGH,IAAI,CAACI,KAAK,CAACJ,IAAI,CAACK,IAAI,CAACN,CAAC,CAAC,EAAEC,IAAI,CAACK,IAAI,CAAC,CAAC,GAAGN,CAAC,CAAC,CAAC;EACxD,MAAMO,QAAQ,GAAGX,CAAC,GAAGQ,CAAC;EACtB,OAAOG,QAAQ,GAAG,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,MAAMT,gBAAgB,GAAIU,OAAO,IAAK;EACpC,OAAOA,OAAO,IAAIP,IAAI,CAACQ,EAAE,GAAG,GAAG,CAAC;AAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}