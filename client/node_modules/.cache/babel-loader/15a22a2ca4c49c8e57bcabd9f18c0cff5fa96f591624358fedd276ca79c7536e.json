{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sibongile\\\\Documents\\\\sibongile\\\\2024\\\\projects\\\\portfolio\\\\APIs\\\\travel_ease\\\\src\\\\components\\\\Map\\\\Map.jsx\",\n  _s = $RefreshSig$();\n// Map.js\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { GoogleMap, useJsApiLoader } from \"@react-google-maps/api\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  height: \"70vh\"\n};\nfunction Map({\n  setCoordinates,\n  setBounds,\n  coordinates\n}) {\n  _s();\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: \"google-map-script\",\n    googleMapsApiKey: \"AIzaSyBCL1EwLHgn8s3qXIk-rTVtr3DW3P8ZHR4\",\n    // Replace with your actual API key\n    libraries: [\"marker\"] // Load the marker library\n  });\n  const [map, setMap] = useState(null);\n  const [initialCenter, setInitialCenter] = useState({\n    lat: -26.196368068356826,\n    lng: 28.032628842080946\n  });\n  useEffect(() => {\n    // Set initial center to default coordinates\n    setInitialCenter({\n      lat: -26.196368068356826,\n      lng: 28.032628842080946\n    });\n\n    // Try to retrieve user's current location with high accuracy\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setInitialCenter({\n          lat: latitude,\n          lng: longitude\n        });\n      }, error => {\n        console.error(error);\n      }, {\n        enableHighAccuracy: true\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, []); // This effect runs only once after the component mounts\n\n  const onLoad = useCallback(map => {\n    setMap(map);\n    // Adjust the map bounds based on the initial center\n    const bounds = new window.google.maps.LatLngBounds();\n    bounds.extend(new window.google.maps.LatLng(initialCenter.lat, initialCenter.lng));\n    map.fitBounds(bounds);\n\n    // Create a new AdvancedMarkerElement\n    const marker = new window.google.maps.marker.AdvancedMarkerElement({\n      position: {\n        lat: initialCenter.lat,\n        lng: initialCenter.lng\n      },\n      map: map\n    });\n    return () => {\n      marker.setMap(null);\n    };\n  }, [initialCenter]);\n  const onUnmount = useCallback(() => {\n    setMap(null);\n  }, []);\n  const handleBoundsChanged = () => {\n    if (map) {\n      const bounds = map.getBounds();\n      const ne = bounds.getNorthEast();\n      const sw = bounds.getSouthWest();\n      const newBounds = {\n        ne: {\n          lat: ne.lat(),\n          lng: ne.lng()\n        },\n        sw: {\n          lat: sw.lat(),\n          lng: sw.lng()\n        }\n      };\n      setBounds(newBounds);\n      console.log(\"Bounds:\", newBounds);\n    }\n  };\n  const handleCenterChanged = () => {\n    if (map) {\n      const newCenter = map.getCenter();\n      const newCoordinates = {\n        lat: newCenter.lat(),\n        lng: newCenter.lng()\n      };\n      setCoordinates(newCoordinates);\n      console.log(\"Center:\", newCoordinates);\n    }\n  };\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: initialCenter,\n    zoom: 15,\n    onLoad: onLoad,\n    onUnmount: onUnmount,\n    onCenterChanged: handleCenterChanged,\n    onBoundsChanged: handleBoundsChanged\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(Map, \"W7lBlq7F19NyLIBxMuDS1qHYgUs=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = Map;\nexport default _c2 = /*#__PURE__*/React.memo(Map);\nvar _c, _c2;\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","GoogleMap","useJsApiLoader","jsxDEV","_jsxDEV","Fragment","_Fragment","containerStyle","height","Map","setCoordinates","setBounds","coordinates","_s","isLoaded","id","googleMapsApiKey","libraries","map","setMap","initialCenter","setInitialCenter","lat","lng","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","error","console","enableHighAccuracy","onLoad","bounds","window","google","maps","LatLngBounds","extend","LatLng","fitBounds","marker","AdvancedMarkerElement","onUnmount","handleBoundsChanged","getBounds","ne","getNorthEast","sw","getSouthWest","newBounds","log","handleCenterChanged","newCenter","getCenter","newCoordinates","mapContainerStyle","center","zoom","onCenterChanged","onBoundsChanged","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","memo","$RefreshReg$"],"sources":["C:/Users/Sibongile/Documents/sibongile/2024/projects/portfolio/APIs/travel_ease/src/components/Map/Map.jsx"],"sourcesContent":["// Map.js\r\nimport React, { useState, useCallback, useEffect } from \"react\";\r\nimport { GoogleMap, useJsApiLoader } from \"@react-google-maps/api\";\r\n\r\nconst containerStyle = {\r\n  height: \"70vh\",\r\n};\r\n\r\nfunction Map({ setCoordinates, setBounds, coordinates }) {\r\n  const { isLoaded } = useJsApiLoader({\r\n    id: \"google-map-script\",\r\n    googleMapsApiKey: \"AIzaSyBCL1EwLHgn8s3qXIk-rTVtr3DW3P8ZHR4\", // Replace with your actual API key\r\n    libraries: [\"marker\"], // Load the marker library\r\n  });\r\n\r\n  const [map, setMap] = useState(null);\r\n  const [initialCenter, setInitialCenter] = useState({\r\n    lat: -26.196368068356826,\r\n    lng: 28.032628842080946,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Set initial center to default coordinates\r\n    setInitialCenter({ lat: -26.196368068356826, lng: 28.032628842080946 });\r\n\r\n    // Try to retrieve user's current location with high accuracy\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          setInitialCenter({ lat: latitude, lng: longitude });\r\n        },\r\n        (error) => {\r\n          console.error(error);\r\n        },\r\n        { enableHighAccuracy: true }\r\n      );\r\n    } else {\r\n      console.error(\"Geolocation is not supported by this browser.\");\r\n    }\r\n  }, []); // This effect runs only once after the component mounts\r\n\r\n  const onLoad = useCallback(\r\n    (map) => {\r\n      setMap(map);\r\n      // Adjust the map bounds based on the initial center\r\n      const bounds = new window.google.maps.LatLngBounds();\r\n      bounds.extend(\r\n        new window.google.maps.LatLng(initialCenter.lat, initialCenter.lng)\r\n      );\r\n      map.fitBounds(bounds);\r\n\r\n      // Create a new AdvancedMarkerElement\r\n      const marker = new window.google.maps.marker.AdvancedMarkerElement({\r\n        position: { lat: initialCenter.lat, lng: initialCenter.lng },\r\n        map: map,\r\n      });\r\n\r\n      return () => {\r\n        marker.setMap(null);\r\n      };\r\n    },\r\n    [initialCenter]\r\n  );\r\n\r\n  const onUnmount = useCallback(() => {\r\n    setMap(null);\r\n  }, []);\r\n\r\n  const handleBoundsChanged = () => {\r\n    if (map) {\r\n      const bounds = map.getBounds();\r\n      const ne = bounds.getNorthEast();\r\n      const sw = bounds.getSouthWest();\r\n      const newBounds = {\r\n        ne: { lat: ne.lat(), lng: ne.lng() },\r\n        sw: { lat: sw.lat(), lng: sw.lng() },\r\n      };\r\n      setBounds(newBounds);\r\n      console.log(\"Bounds:\", newBounds);\r\n    }\r\n  };\r\n\r\n  const handleCenterChanged = () => {\r\n    if (map) {\r\n      const newCenter = map.getCenter();\r\n      const newCoordinates = { lat: newCenter.lat(), lng: newCenter.lng() };\r\n      setCoordinates(newCoordinates);\r\n      console.log(\"Center:\", newCoordinates);\r\n    }\r\n  };\r\n\r\n  return isLoaded ? (\r\n    <GoogleMap\r\n      mapContainerStyle={containerStyle}\r\n      center={initialCenter}\r\n      zoom={15}\r\n      onLoad={onLoad}\r\n      onUnmount={onUnmount}\r\n      onCenterChanged={handleCenterChanged}\r\n      onBoundsChanged={handleBoundsChanged}\r\n    >\r\n      {/* No Marker component is needed here as it's created in onLoad */}\r\n    </GoogleMap>\r\n  ) : (\r\n    <></>\r\n  );\r\n}\r\n\r\nexport default React.memo(Map);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}