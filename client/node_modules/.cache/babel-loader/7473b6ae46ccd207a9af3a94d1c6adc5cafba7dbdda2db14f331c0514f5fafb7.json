{"ast":null,"code":"const express = require(\"express\");\nconst cors = require(\"cors\");\nconst fetch = require(\"node-fetch\");\nconst app = express();\nconst PORT = process.env.PORT || 5000;\napp.use(cors());\napp.get(\"/places\", async (req, res) => {\n  const URL = \"https://maps.googleapis.com/maps/api/place/textsearch/json\";\n  const category = \"restaurant\";\n  const {\n    lat,\n    lng,\n    northeast_lat,\n    northeast_lng,\n    southwest_lat,\n    southwest_lng\n  } = req.query;\n  const radius = 500;\n  const API_KEY = \"AIzaSyBCL1EwLHgn8s3qXIk-rTVtr3DW3P8ZHR4\";\n  if (!lat || !lng) {\n    return res.status(400).json({\n      error: \"Latitude and longitude are required\"\n    });\n  }\n  let searchURL = `${URL}?query=${category}&location=${lat},${lng}&radius=${radius}&key=${API_KEY}`;\n  if (northeast_lat && northeast_lng && southwest_lat && southwest_lng) {\n    searchURL += `&bounds=${southwest_lat},${southwest_lng}|${northeast_lat},${northeast_lng}`;\n  }\n  console.log(searchURL);\n  try {\n    const response = await fetch(searchURL);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    res.json(data);\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    res.status(500).json({\n      error: \"Failed to fetch data from Google Places API\"\n    });\n  }\n});\napp.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","fetch","app","PORT","process","env","use","get","req","res","URL","category","lat","lng","northeast_lat","northeast_lng","southwest_lat","southwest_lng","query","radius","API_KEY","status","json","error","searchURL","console","log","response","ok","Error","data","listen"],"sources":["C:/Users/Sibongile/Documents/sibongile/2024/projects/portfolio/APIs/travel_ease/client/src/components/Map/Map.jsx"],"sourcesContent":["const express = require(\"express\");\r\nconst cors = require(\"cors\");\r\nconst fetch = require(\"node-fetch\");\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 5000;\r\n\r\napp.use(cors());\r\n\r\napp.get(\"/places\", async (req, res) => {\r\n  const URL = \"https://maps.googleapis.com/maps/api/place/textsearch/json\";\r\n  const category = \"restaurant\";\r\n  const {\r\n    lat,\r\n    lng,\r\n    northeast_lat,\r\n    northeast_lng,\r\n    southwest_lat,\r\n    southwest_lng,\r\n  } = req.query;\r\n  const radius = 500;\r\n  const API_KEY = \"AIzaSyBCL1EwLHgn8s3qXIk-rTVtr3DW3P8ZHR4\";\r\n\r\n  if (!lat || !lng) {\r\n    return res\r\n      .status(400)\r\n      .json({ error: \"Latitude and longitude are required\" });\r\n  }\r\n\r\n  let searchURL = `${URL}?query=${category}&location=${lat},${lng}&radius=${radius}&key=${API_KEY}`;\r\n\r\n  if (northeast_lat && northeast_lng && southwest_lat && southwest_lng) {\r\n    searchURL += `&bounds=${southwest_lat},${southwest_lng}|${northeast_lat},${northeast_lng}`;\r\n  }\r\n\r\n  console.log(searchURL);\r\n  try {\r\n    const response = await fetch(searchURL);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    res.json(data);\r\n  } catch (error) {\r\n    console.error(\"Error fetching data:\", error);\r\n    res\r\n      .status(500)\r\n      .json({ error: \"Failed to fetch data from Google Places API\" });\r\n  }\r\n});\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on http://localhost:${PORT}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,KAAK,GAAGF,OAAO,CAAC,YAAY,CAAC;AAEnC,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AAErCD,GAAG,CAACI,GAAG,CAACN,IAAI,CAAC,CAAC,CAAC;AAEfE,GAAG,CAACK,GAAG,CAAC,SAAS,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACrC,MAAMC,GAAG,GAAG,4DAA4D;EACxE,MAAMC,QAAQ,GAAG,YAAY;EAC7B,MAAM;IACJC,GAAG;IACHC,GAAG;IACHC,aAAa;IACbC,aAAa;IACbC,aAAa;IACbC;EACF,CAAC,GAAGT,GAAG,CAACU,KAAK;EACb,MAAMC,MAAM,GAAG,GAAG;EAClB,MAAMC,OAAO,GAAG,yCAAyC;EAEzD,IAAI,CAACR,GAAG,IAAI,CAACC,GAAG,EAAE;IAChB,OAAOJ,GAAG,CACPY,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAsC,CAAC,CAAC;EAC3D;EAEA,IAAIC,SAAS,GAAI,GAAEd,GAAI,UAASC,QAAS,aAAYC,GAAI,IAAGC,GAAI,WAAUM,MAAO,QAAOC,OAAQ,EAAC;EAEjG,IAAIN,aAAa,IAAIC,aAAa,IAAIC,aAAa,IAAIC,aAAa,EAAE;IACpEO,SAAS,IAAK,WAAUR,aAAc,IAAGC,aAAc,IAAGH,aAAc,IAAGC,aAAc,EAAC;EAC5F;EAEAU,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;EACtB,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAM1B,KAAK,CAACuB,SAAS,CAAC;IACvC,IAAI,CAACG,QAAQ,CAACC,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBF,QAAQ,CAACN,MAAO,EAAC,CAAC;IAC3D;IACA,MAAMS,IAAI,GAAG,MAAMH,QAAQ,CAACL,IAAI,CAAC,CAAC;IAClCb,GAAG,CAACa,IAAI,CAACQ,IAAI,CAAC;EAChB,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdE,OAAO,CAACF,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5Cd,GAAG,CACAY,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAA8C,CAAC,CAAC;EACnE;AACF,CAAC,CAAC;AAEFrB,GAAG,CAAC6B,MAAM,CAAC5B,IAAI,EAAE,MAAM;EACrBsB,OAAO,CAACC,GAAG,CAAE,yCAAwCvB,IAAK,EAAC,CAAC;AAC9D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}